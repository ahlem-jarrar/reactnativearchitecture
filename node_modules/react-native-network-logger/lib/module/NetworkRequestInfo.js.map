{"version":3,"sources":["NetworkRequestInfo.ts"],"names":["BlobFileReader","fromEntries","NetworkRequestInfo","constructor","type","method","url","undefined","duration","endTime","startTime","curlRequest","headersPart","requestHeaders","Object","entries","map","key","value","escapeQuotes","join","body","dataSent","methodPart","toUpperCase","bodyPart","parts","filter","Boolean","replace","stringifyFormat","data","_parts","length","JSON","stringify","parse","e","getRequestBody","parseResponseBlob","blobReader","readAsText","response","Promise","resolve","reject","handleError","error","addEventListener","result","getResponseBody","responseType"],"mappings":"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","sourcesContent":["import BlobFileReader from 'react-native/Libraries/Blob/FileReader';\nimport { Headers, RequestMethod } from './types';\nimport fromEntries from './utils/fromEntries';\n\nexport default class NetworkRequestInfo {\n  type = '';\n  url = '';\n  method: RequestMethod;\n  status: number = -1;\n  dataSent = '';\n  responseContentType = '';\n  responseSize = 0;\n  requestHeaders: Headers = {};\n  responseHeaders: Headers = {};\n  response = '';\n  responseURL = '';\n  responseType = '';\n  timeout = 0;\n  closeReason = '';\n  messages = '';\n  serverClose = undefined;\n  serverError = undefined;\n  startTime: number = 0;\n  endTime: number = 0;\n\n  constructor(type: string, method: RequestMethod, url: string) {\n    this.type = type;\n    this.method = method;\n    this.url = url;\n  }\n\n  get duration() {\n    return this.endTime - this.startTime;\n  }\n\n  get curlRequest() {\n    let headersPart =\n      this.requestHeaders &&\n      Object.entries(this.requestHeaders)\n        .map(([key, value]) => `'${key}: ${this.escapeQuotes(value)}'`)\n        .join(' -H ');\n    headersPart = headersPart ? `-H ${headersPart}` : '';\n\n    const body = this.dataSent && this.escapeQuotes(this.dataSent);\n\n    const methodPart =\n      this.method !== 'GET' ? `-X${this.method.toUpperCase()}` : '';\n    const bodyPart = body ? `-d '${body}'` : '';\n\n    const parts = ['curl', methodPart, headersPart, bodyPart, `'${this.url}'`];\n\n    return parts.filter(Boolean).join(' ');\n  }\n\n  private escapeQuotes(value: string) {\n    return value.replace?.(/'/g, `\\\\'`);\n  }\n\n  private stringifyFormat(data: any) {\n    try {\n      if (data?._parts?.length) {\n        return JSON.stringify(fromEntries(data?._parts), null, 2);\n      }\n      return JSON.stringify(JSON.parse(data), null, 2);\n    } catch (e) {\n      return `${data}`;\n    }\n  }\n\n  getRequestBody() {\n    return this.stringifyFormat(this.dataSent);\n  }\n\n  private async parseResponseBlob() {\n    const blobReader = new BlobFileReader();\n    blobReader.readAsText(this.response);\n\n    return await new Promise<string>((resolve, reject) => {\n      const handleError = () => reject(blobReader.error);\n\n      blobReader.addEventListener('load', () => {\n        resolve(blobReader.result);\n      });\n      blobReader.addEventListener('error', handleError);\n      blobReader.addEventListener('abort', handleError);\n    });\n  }\n\n  async getResponseBody() {\n    const body = await (this.responseType !== 'blob'\n      ? this.response\n      : this.parseResponseBlob());\n\n    return this.stringifyFormat(body);\n  }\n}\n"]}